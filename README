task1 run
Данный программный код выполняет следующие действия:

    Импортируются необходимые модули: numpy, matplotlib.pyplot, scipy.io.loadmat.
    Загружаются данные и веса из файлов test_set.mat и weights.mat с помощью функции loadmat из модуля scipy.io.
    Случайным образом выбираются 100 примеров из общего набора данных и сохраняются в переменной selected_examples.
    Вызывается функция displayData из модуля displayData, чтобы отобразить случайные примеры из переменной selected_examples.
    Используется функция predict из модуля predict для предсказания меток классов для всех примеров в наборе данных X. Результат сохраняется в переменной pred.
    Вычисляется точность предсказаний путем сравнения предсказанных меток pred с истинными метками y. Результат сохраняется в переменной accuracy.
    Выводится точность предсказаний на экран с помощью функции print.
    Генерируется случайная перестановка индексов данных и выбираются 5 случайных примеров для классификации.
    Для каждого выбранного примера вызывается функция predict для предсказания метки класса. Затем отображается изображение примера с предсказанной меткой с помощью функции displayData.
    Находятся индексы ошибочных предсказаний путем сравнения предсказанных меток pred с истинными метками y. Затем случайным образом выбираются 100 ошибочных примеров и отображаются с помощью функции displayData.

task2 run 1
Данный программный код выполняет следующие действия:

    Импортируются необходимые модули: numpy, scipy.optimize.minimize, scipy.io.loadmat.
    Загружаются данные и веса из файлов training_set.mat и weights.mat с помощью функции loadmat из модуля scipy.io.
    Определяются размерности нейронной сети, количество примеров и другие параметры.
    Выполняются различные операции для подготовки данных и параметров нейронной сети:
        Добавляется столбец с единицами к матрице X для представления смещения (нейрона смещения).
        Декодируется вектор y в матрицу Y для обработки многоклассовой классификации.
        Объединяются матрицы весов Theta1 и Theta2 в один большой массив nn_params.
    Вычисляется функция стоимости для разных значений lambda_coef (коэффициента регуляризации) и выводится на экран.
    Проверяется производная функции сигмоиды в заданных точках и выводится на экран.
    Отображается график функции сигмоиды.
    Инициализируются случайные значения для параметров нейронной сети и упаковываются в initial_nn_params.
    Происходит обучение нейронной сети с использованием алгоритма минимизации функции стоимости и вычисления градиента. Результат обучения сохраняется в res.
    Распаковываются вычисленные параметры нейронной сети в матрицы Theta1 и Theta2.
    Вычисляется отклик сети на обучающей выборке и предсказываются метки классов y_pred.
    Выводится точность нейронной сети на обучающей выборке на экран.

task3 MyTask
    
